
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080006c4  080006c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d4  080006d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006e0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019ac  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005be  00000000  00000000  000219e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  000221a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ef4  00000000  00000000  00022358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ead  00000000  00000000  0003b24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0e41  00000000  00000000  0003d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdf3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000064c  00000000  00000000  000fdf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080006ac 	.word	0x080006ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080006ac 	.word	0x080006ac

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <USART2_Init>:
#define BAUDRATE 19200
#define APBx_FREQ 16000000
#define GPIOAEN				   (1U << 0)
#define GPIOCEN                (1U << 2)

void USART2_Init() {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  // тактирование
  RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <USART2_Init+0x4c>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <USART2_Init+0x4c>)
 800024a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024e:	6413      	str	r3, [r2, #64]	; 0x40

  //a) Включите приёмник и передатчик.
  // transmit enable, receive enable
  USART2->CR1 |= USART_CR1_TE;
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <USART2_Init+0x50>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <USART2_Init+0x50>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	60d3      	str	r3, [r2, #12]
  USART2->CR1 |= USART_CR1_RE;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <USART2_Init+0x50>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <USART2_Init+0x50>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	60d3      	str	r3, [r2, #12]
  //b) Рассчитайте и установите скорость передачи (baud rate) в регистре (USART_BRR)
  // для системной частоты 16MHz
  USART2->BRR = APBx_FREQ / BAUDRATE;
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <USART2_Init+0x50>)
 800026a:	f240 3241 	movw	r2, #833	; 0x341
 800026e:	609a      	str	r2, [r3, #8]
  //c) Включите генерацию прерываний RXNE (USART_SR)
  USART2->SR = USART_SR_RXNE;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <USART2_Init+0x50>)
 8000272:	2220      	movs	r2, #32
 8000274:	601a      	str	r2, [r3, #0]
  //d) Разрешите соответствующий вектор прерываний USART в NVIC. - ?
  // указать функцию прерываний
  NVIC_EnableIRQ(USART2_IRQn);
 8000276:	2026      	movs	r0, #38	; 0x26
 8000278:	f7ff ffc4 	bl	8000204 <__NVIC_EnableIRQ>
  //e) Включите сам USART (USART_CR1, UE=1 ?)
  USART2->CR1 |= USART_CR1_UE;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <USART2_Init+0x50>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4a03      	ldr	r2, [pc, #12]	; (8000290 <USART2_Init+0x50>)
 8000282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000286:	60d3      	str	r3, [r2, #12]
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40023800 	.word	0x40023800
 8000290:	40004400 	.word	0x40004400

08000294 <GPIOA_Init>:

void GPIOA_Init() {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  // тактирование
  RCC->AHB1ENR |= GPIOAEN;
 8000298:	4b29      	ldr	r3, [pc, #164]	; (8000340 <GPIOA_Init+0xac>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a28      	ldr	r2, [pc, #160]	; (8000340 <GPIOA_Init+0xac>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30

  // PA2 mode: AF (10)
  GPIOA->MODER |= (1U << 5);
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <GPIOA_Init+0xb0>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a26      	ldr	r2, [pc, #152]	; (8000344 <GPIOA_Init+0xb0>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1U << 4);
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <GPIOA_Init+0xb0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a23      	ldr	r2, [pc, #140]	; (8000344 <GPIOA_Init+0xb0>)
 80002b6:	f023 0310 	bic.w	r3, r3, #16
 80002ba:	6013      	str	r3, [r2, #0]
  // PA3 mode: AF (10)
  GPIOA->MODER |= (1U << 7);
 80002bc:	4b21      	ldr	r3, [pc, #132]	; (8000344 <GPIOA_Init+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a20      	ldr	r2, [pc, #128]	; (8000344 <GPIOA_Init+0xb0>)
 80002c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(1U << 6);
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <GPIOA_Init+0xb0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <GPIOA_Init+0xb0>)
 80002ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002d2:	6013      	str	r3, [r2, #0]

  // PA2 AFRL=AFR[0] 0111: AF07 (USART2_TX)
  GPIOA->AFR[0] &= ~(1U << 11);
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <GPIOA_Init+0xb0>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <GPIOA_Init+0xb0>)
 80002da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002de:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1U << 10);
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <GPIOA_Init+0xb0>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <GPIOA_Init+0xb0>)
 80002e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ea:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1U << 9);
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <GPIOA_Init+0xb0>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a14      	ldr	r2, [pc, #80]	; (8000344 <GPIOA_Init+0xb0>)
 80002f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f6:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1U << 8);
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <GPIOA_Init+0xb0>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <GPIOA_Init+0xb0>)
 80002fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000302:	6213      	str	r3, [r2, #32]

  // PA3 AF: AF07 (0111) (USART2_RX)
  GPIOA->AFR[0] &= ~(1U << 15);
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <GPIOA_Init+0xb0>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <GPIOA_Init+0xb0>)
 800030a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800030e:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1U << 14);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <GPIOA_Init+0xb0>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <GPIOA_Init+0xb0>)
 8000316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800031a:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1U << 13);
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <GPIOA_Init+0xb0>)
 800031e:	6a1b      	ldr	r3, [r3, #32]
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <GPIOA_Init+0xb0>)
 8000322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000326:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (1U << 12);
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <GPIOA_Init+0xb0>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <GPIOA_Init+0xb0>)
 800032e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000332:	6213      	str	r3, [r2, #32]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	40020000 	.word	0x40020000

08000348 <LED_mode_setup>:

void LED_mode_setup() {
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= GPIOCEN;
 800034c:	4b35      	ldr	r3, [pc, #212]	; (8000424 <LED_mode_setup+0xdc>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a34      	ldr	r2, [pc, #208]	; (8000424 <LED_mode_setup+0xdc>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
  // 8 leds
  // moder for pc4 = 01 - output mode
  GPIOC->MODER |= (1U << 8);
 8000358:	4b33      	ldr	r3, [pc, #204]	; (8000428 <LED_mode_setup+0xe0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a32      	ldr	r2, [pc, #200]	; (8000428 <LED_mode_setup+0xe0>)
 800035e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000362:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 9);
 8000364:	4b30      	ldr	r3, [pc, #192]	; (8000428 <LED_mode_setup+0xe0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a2f      	ldr	r2, [pc, #188]	; (8000428 <LED_mode_setup+0xe0>)
 800036a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800036e:	6013      	str	r3, [r2, #0]
  // pc5 output
  GPIOC->MODER |= (1U << 10);
 8000370:	4b2d      	ldr	r3, [pc, #180]	; (8000428 <LED_mode_setup+0xe0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a2c      	ldr	r2, [pc, #176]	; (8000428 <LED_mode_setup+0xe0>)
 8000376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800037a:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 11);
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <LED_mode_setup+0xe0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a29      	ldr	r2, [pc, #164]	; (8000428 <LED_mode_setup+0xe0>)
 8000382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000386:	6013      	str	r3, [r2, #0]
  // pc6 output
  GPIOC->MODER |= (1U << 12);
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <LED_mode_setup+0xe0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a26      	ldr	r2, [pc, #152]	; (8000428 <LED_mode_setup+0xe0>)
 800038e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000392:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 13);
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <LED_mode_setup+0xe0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a23      	ldr	r2, [pc, #140]	; (8000428 <LED_mode_setup+0xe0>)
 800039a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800039e:	6013      	str	r3, [r2, #0]
  // pc7 output
  GPIOC->MODER |= (1U << 14);
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <LED_mode_setup+0xe0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <LED_mode_setup+0xe0>)
 80003a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003aa:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 15);
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <LED_mode_setup+0xe0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a1d      	ldr	r2, [pc, #116]	; (8000428 <LED_mode_setup+0xe0>)
 80003b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003b6:	6013      	str	r3, [r2, #0]
  // pc8 output
  GPIOC->MODER |= (1U << 16);
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <LED_mode_setup+0xe0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a1a      	ldr	r2, [pc, #104]	; (8000428 <LED_mode_setup+0xe0>)
 80003be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c2:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 17);
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <LED_mode_setup+0xe0>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a17      	ldr	r2, [pc, #92]	; (8000428 <LED_mode_setup+0xe0>)
 80003ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003ce:	6013      	str	r3, [r2, #0]
  // pc9 output
  GPIOC->MODER |= (1U << 18);
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <LED_mode_setup+0xe0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <LED_mode_setup+0xe0>)
 80003d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003da:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 19);
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <LED_mode_setup+0xe0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <LED_mode_setup+0xe0>)
 80003e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80003e6:	6013      	str	r3, [r2, #0]
  // pc10 output
  GPIOC->MODER |= (1U << 20);
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <LED_mode_setup+0xe0>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <LED_mode_setup+0xe0>)
 80003ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003f2:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 21);
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <LED_mode_setup+0xe0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <LED_mode_setup+0xe0>)
 80003fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80003fe:	6013      	str	r3, [r2, #0]
  // pc11 output
  GPIOC->MODER |= (1U << 22);
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <LED_mode_setup+0xe0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a08      	ldr	r2, [pc, #32]	; (8000428 <LED_mode_setup+0xe0>)
 8000406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040a:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~(1U << 23);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <LED_mode_setup+0xe0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <LED_mode_setup+0xe0>)
 8000412:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000416:	6013      	str	r3, [r2, #0]
  // button
  // pd2, pc13 - input = 00 - reset state
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40023800 	.word	0x40023800
 8000428:	40020800 	.word	0x40020800

0800042c <transmit>:

// transmit an array
void transmit(uint8_t * data, uint8_t n) {
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < n; i++) {
 8000438:	2300      	movs	r3, #0
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	e00f      	b.n	800045e <transmit+0x32>
	// пока TXE = 0 будет задержка (TXE = 1 means USART_DR is empty, we can write)
    while (!(USART2->SR & USART_SR_TXE)) {};
 800043e:	bf00      	nop
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <transmit+0x48>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0f9      	beq.n	8000440 <transmit+0x14>
	USART2->DR = data[i];
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <transmit+0x48>)
 8000456:	605a      	str	r2, [r3, #4]
  for (uint8_t i = 0; i < n; i++) {
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	3301      	adds	r3, #1
 800045c:	73fb      	strb	r3, [r7, #15]
 800045e:	7bfa      	ldrb	r2, [r7, #15]
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	429a      	cmp	r2, r3
 8000464:	d3eb      	bcc.n	800043e <transmit+0x12>
  }
}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40004400 	.word	0x40004400

08000478 <handler>:

// обработчик операции которая по вариантам
void handler(uint8_t * data, uint8_t n) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
	/* Сейчас обработчик посылает текстовый ответ.
	 * В лабе обработчик будет включать светодиод.
	 */
	uint8_t led1[] = {'l', 'e', 'd', '\r', '\n'};
 8000484:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <handler+0x68>)
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800048e:	6018      	str	r0, [r3, #0]
 8000490:	3304      	adds	r3, #4
 8000492:	7019      	strb	r1, [r3, #0]
	uint8_t off0[] = {'o', 'f', 'f', '\r', '\n'};
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <handler+0x6c>)
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800049e:	6018      	str	r0, [r3, #0]
 80004a0:	3304      	adds	r3, #4
 80004a2:	7019      	strb	r1, [r3, #0]
	uint8_t n_trans = 5;
 80004a4:	2305      	movs	r3, #5
 80004a6:	75fb      	strb	r3, [r7, #23]
	switch(data[1]) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3301      	adds	r3, #1
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b30      	cmp	r3, #48	; 0x30
 80004b0:	d009      	beq.n	80004c6 <handler+0x4e>
 80004b2:	2b31      	cmp	r3, #49	; 0x31
 80004b4:	d10f      	bne.n	80004d6 <handler+0x5e>
	case '1': {
		transmit(led1, n_trans);
 80004b6:	7dfa      	ldrb	r2, [r7, #23]
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4611      	mov	r1, r2
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ffb4 	bl	800042c <transmit>
		break;
 80004c4:	e007      	b.n	80004d6 <handler+0x5e>
	}
	case '0': {
		transmit(off0, n_trans);
 80004c6:	7dfa      	ldrb	r2, [r7, #23]
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	4611      	mov	r1, r2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffac 	bl	800042c <transmit>
		break;
 80004d4:	bf00      	nop
	}
	}
}
 80004d6:	bf00      	nop
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	080006c4 	.word	0x080006c4
 80004e4:	080006cc 	.word	0x080006cc

080004e8 <receive_arr>:
	// сброс флага RXN
	//USART2->SR &= ~USART_SR_RXNE;
	return res;
}

void receive_arr(uint8_t*buf, uint8_t n) {
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
	// receive
	// when character is received, RXNE bit is set
	// while nothing is received -- wait

	for (uint8_t i = 0; i < n; i++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
 80004f8:	e010      	b.n	800051c <receive_arr+0x34>
		// Ждём, пока в USART2 появится новый байт
		while (!(USART2->SR & USART_SR_RXNE)) {};
 80004fa:	bf00      	nop
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <receive_arr+0x4c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f003 0320 	and.w	r3, r3, #32
 8000504:	2b00      	cmp	r3, #0
 8000506:	d0f9      	beq.n	80004fc <receive_arr+0x14>
		buf[i] = (uint8_t)(USART2->DR & 0xFF);
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <receive_arr+0x4c>)
 800050a:	6859      	ldr	r1, [r3, #4]
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	b2ca      	uxtb	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < n; i++) {
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3301      	adds	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	78fb      	ldrb	r3, [r7, #3]
 8000520:	429a      	cmp	r2, r3
 8000522:	d3ea      	bcc.n	80004fa <receive_arr+0x12>
	}
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40004400 	.word	0x40004400

08000538 <main>:

int main(void) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  GPIOA_Init();
 800053e:	f7ff fea9 	bl	8000294 <GPIOA_Init>
  USART2_Init();
 8000542:	f7ff fe7d 	bl	8000240 <USART2_Init>
  LED_mode_setup();
 8000546:	f7ff feff 	bl	8000348 <LED_mode_setup>

  // repeater
  // variable to store received data

  uint8_t n = 4;
 800054a:	2304      	movs	r3, #4
 800054c:	71fb      	strb	r3, [r7, #7]
  uint8_t t[] = {'a', 'b', 'c', 'd'};
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <main+0x34>)
 8000550:	603b      	str	r3, [r7, #0]
  // loop forever
  for(;;) {
	  receive_arr(t, n);
 8000552:	79fa      	ldrb	r2, [r7, #7]
 8000554:	463b      	mov	r3, r7
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffc5 	bl	80004e8 <receive_arr>
	// получили данные -- пора отправить ответ
	handler(t, n);
 800055e:	79fa      	ldrb	r2, [r7, #7]
 8000560:	463b      	mov	r3, r7
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff87 	bl	8000478 <handler>
	  receive_arr(t, n);
 800056a:	e7f2      	b.n	8000552 <main+0x1a>
 800056c:	64636261 	.word	0x64636261

08000570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <NMI_Handler+0x4>

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f83e 	bl	800063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <SystemInit+0x20>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <SystemInit+0x20>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000620 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000612:	f7ff ffd7 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000616:	f000 f825 	bl	8000664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800061a:	f7ff ff8d 	bl	8000538 <main>
  bx  lr    
 800061e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800062c:	080006dc 	.word	0x080006dc
  ldr r2, =_sbss
 8000630:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000634:	20000024 	.word	0x20000024

08000638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC_IRQHandler>
	...

0800063c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x20>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <HAL_IncTick+0x24>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <HAL_IncTick+0x24>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000
 8000660:	20000020 	.word	0x20000020

08000664 <__libc_init_array>:
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	4d0d      	ldr	r5, [pc, #52]	; (800069c <__libc_init_array+0x38>)
 8000668:	4c0d      	ldr	r4, [pc, #52]	; (80006a0 <__libc_init_array+0x3c>)
 800066a:	1b64      	subs	r4, r4, r5
 800066c:	10a4      	asrs	r4, r4, #2
 800066e:	2600      	movs	r6, #0
 8000670:	42a6      	cmp	r6, r4
 8000672:	d109      	bne.n	8000688 <__libc_init_array+0x24>
 8000674:	4d0b      	ldr	r5, [pc, #44]	; (80006a4 <__libc_init_array+0x40>)
 8000676:	4c0c      	ldr	r4, [pc, #48]	; (80006a8 <__libc_init_array+0x44>)
 8000678:	f000 f818 	bl	80006ac <_init>
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	10a4      	asrs	r4, r4, #2
 8000680:	2600      	movs	r6, #0
 8000682:	42a6      	cmp	r6, r4
 8000684:	d105      	bne.n	8000692 <__libc_init_array+0x2e>
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f855 3b04 	ldr.w	r3, [r5], #4
 800068c:	4798      	blx	r3
 800068e:	3601      	adds	r6, #1
 8000690:	e7ee      	b.n	8000670 <__libc_init_array+0xc>
 8000692:	f855 3b04 	ldr.w	r3, [r5], #4
 8000696:	4798      	blx	r3
 8000698:	3601      	adds	r6, #1
 800069a:	e7f2      	b.n	8000682 <__libc_init_array+0x1e>
 800069c:	080006d4 	.word	0x080006d4
 80006a0:	080006d4 	.word	0x080006d4
 80006a4:	080006d4 	.word	0x080006d4
 80006a8:	080006d8 	.word	0x080006d8

080006ac <_init>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	bf00      	nop
 80006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b2:	bc08      	pop	{r3}
 80006b4:	469e      	mov	lr, r3
 80006b6:	4770      	bx	lr

080006b8 <_fini>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr
