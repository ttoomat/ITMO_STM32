
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000510  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00010510  2**0
                  CONTENTS
  4 .ARM          00000000  08000508  08000508  00010510  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000508  08000510  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800050c  0800050c  0001050c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000510  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000510  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001344  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000035b  00000000  00000000  00011884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019303  00000000  00000000  00011d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011a1  00000000  00000000  0002b01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8b3  00000000  00000000  0002c1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000180  00000000  00000000  000b8ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004f0 	.word	0x080004f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004f0 	.word	0x080004f0

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <DAC_MODER_Init>:
#include "init.h"

#define BAUDRATE 19200
#define APBx_FREQ 16000000

void DAC_MODER_Init() {
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	// PA4
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <DAC_MODER_Init+0x34>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <DAC_MODER_Init+0x34>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
	// PA4 mode: Analog
	GPIOA->MODER |= (1U << 8);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <DAC_MODER_Init+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <DAC_MODER_Init+0x38>)
 8000256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 9);
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <DAC_MODER_Init+0x38>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <DAC_MODER_Init+0x38>)
 8000262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000

0800027c <DAC_Init>:

void DAC_Init() {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	DAC_MODER_Init();
 8000280:	f7ff ffde 	bl	8000240 <DAC_MODER_Init>
	RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <DAC_Init+0x2c>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <DAC_Init+0x2c>)
 800028a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800028e:	6413      	str	r3, [r2, #64]	; 0x40
	// channel 1
	DAC->CR |= DAC_CR_EN1;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <DAC_Init+0x30>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <DAC_Init+0x30>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]
	// upload data to DAC
	DAC->DHR12R1 = 0xFFF;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <DAC_Init+0x30>)
 800029e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80002a2:	609a      	str	r2, [r3, #8]
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40007400 	.word	0x40007400

080002b0 <USART2_MODER_Init>:

void USART2_MODER_Init() {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002b4:	4b29      	ldr	r3, [pc, #164]	; (800035c <USART2_MODER_Init+0xac>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a28      	ldr	r2, [pc, #160]	; (800035c <USART2_MODER_Init+0xac>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	// USART2
	// PA2 mode: AF (10)
	GPIOA->MODER |= (1U << 5);
 80002c0:	4b27      	ldr	r3, [pc, #156]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a26      	ldr	r2, [pc, #152]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4);
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a23      	ldr	r2, [pc, #140]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002d2:	f023 0310 	bic.w	r3, r3, #16
 80002d6:	6013      	str	r3, [r2, #0]
	// PA3 mode: AF (10)
	GPIOA->MODER |= (1U << 7);
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a20      	ldr	r2, [pc, #128]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 6);
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ee:	6013      	str	r3, [r2, #0]

	// PA2 AFRL=AFR[0] 0111: AF07 (USART2_TX)
	GPIOA->AFR[0] &= ~(1U << 11);
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <USART2_MODER_Init+0xb0>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <USART2_MODER_Init+0xb0>)
 8000302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000306:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <USART2_MODER_Init+0xb0>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <USART2_MODER_Init+0xb0>)
 800030e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000312:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 8);
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <USART2_MODER_Init+0xb0>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <USART2_MODER_Init+0xb0>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031e:	6213      	str	r3, [r2, #32]
	// PA3 AF: AF07 (0111) (USART2_RX)
	GPIOA->AFR[0] &= ~(1U << 15);
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <USART2_MODER_Init+0xb0>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <USART2_MODER_Init+0xb0>)
 8000326:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800032a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <USART2_MODER_Init+0xb0>)
 800032e:	6a1b      	ldr	r3, [r3, #32]
 8000330:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <USART2_MODER_Init+0xb0>)
 8000332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000336:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <USART2_MODER_Init+0xb0>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a08      	ldr	r2, [pc, #32]	; (8000360 <USART2_MODER_Init+0xb0>)
 800033e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000342:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 12);
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <USART2_MODER_Init+0xb0>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a05      	ldr	r2, [pc, #20]	; (8000360 <USART2_MODER_Init+0xb0>)
 800034a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800034e:	6213      	str	r3, [r2, #32]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000

08000364 <USART2_Init>:

void USART2_Init() {
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	USART2_MODER_Init();
 8000368:	f7ff ffa2 	bl	80002b0 <USART2_MODER_Init>
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <USART2_Init+0x58>)
 800036e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000370:	4a12      	ldr	r2, [pc, #72]	; (80003bc <USART2_Init+0x58>)
 8000372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000376:	6413      	str	r3, [r2, #64]	; 0x40
	// transmit enable, receive enable
	USART2->CR1 |= USART_CR1_TE;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <USART2_Init+0x5c>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <USART2_Init+0x5c>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <USART2_Init+0x5c>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <USART2_Init+0x5c>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	60d3      	str	r3, [r2, #12]
	// baudrate
	USART2->BRR = APBx_FREQ / BAUDRATE;
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <USART2_Init+0x5c>)
 8000392:	f240 3241 	movw	r2, #833	; 0x341
 8000396:	609a      	str	r2, [r3, #8]
	// RXNE interrupt enable
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <USART2_Init+0x5c>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <USART2_Init+0x5c>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	60d3      	str	r3, [r2, #12]
	// MVIC USART2 interrupt function
	NVIC_EnableIRQ(USART2_IRQn);
 80003a4:	2026      	movs	r0, #38	; 0x26
 80003a6:	f7ff ff2d 	bl	8000204 <__NVIC_EnableIRQ>
	// USART2 enable
	USART2->CR1 |= USART_CR1_UE;
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <USART2_Init+0x5c>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <USART2_Init+0x5c>)
 80003b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003b4:	60d3      	str	r3, [r2, #12]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40004400 	.word	0x40004400

080003c4 <USART2_IRQHandler>:

#define CP_FREQ 100000000
#define SIN_FREQ 15
#define SIN_AMPLITUDE 1.5

void USART2_IRQHandler() {}
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <main>:

int main() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	// external clock
	RCC->CR |= RCC_CR_HSEON;
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <main+0x50>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a11      	ldr	r2, [pc, #68]	; (8000424 <main+0x50>)
 80003de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003e2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)) {}
 80003e4:	bf00      	nop
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <main+0x50>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <main+0x12>
	RCC->CR |= RCC_CR_PLLON;
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <main+0x50>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <main+0x50>)
 80003f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003fc:	6013      	str	r3, [r2, #0]
	// flash latency One wait state
	FLASH->ACR |= (1U << 0);
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <main+0x54>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a09      	ldr	r2, [pc, #36]	; (8000428 <main+0x54>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6013      	str	r3, [r2, #0]

	// 2. FPU on
	SCB->CPACR |= (3UL << 10 * 2) | (3UL << 11 * 2);
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <main+0x58>)
 800040c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000410:	4a06      	ldr	r2, [pc, #24]	; (800042c <main+0x58>)
 8000412:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000416:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	// 3-6 - GPIO for UART + UART init + same for DAC
	USART2_Init();
 800041a:	f7ff ffa3 	bl	8000364 <USART2_Init>
	DAC_Init();
 800041e:	f7ff ff2d 	bl	800027c <DAC_Init>

	while (1) {}
 8000422:	e7fe      	b.n	8000422 <main+0x4e>
 8000424:	40023800 	.word	0x40023800
 8000428:	40023c00 	.word	0x40023c00
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <SystemInit+0x20>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SystemInit+0x20>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800048c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000470:	4c0b      	ldr	r4, [pc, #44]	; (80004a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800047e:	f7ff ffd7 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000486:	f7ff ffa5 	bl	80003d4 <main>
  bx  lr    
 800048a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800048c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4d0d      	ldr	r5, [pc, #52]	; (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	; (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1b64      	subs	r4, r4, r5
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2600      	movs	r6, #0
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4d0b      	ldr	r5, [pc, #44]	; (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	; (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2600      	movs	r6, #0
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
